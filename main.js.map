{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,0FAA0F,KAAK,4CAA4C,cAAc;AACzJ;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2FAA2F,IAAI,OAAO,IAAI,4CAA4C,cAAc;AACpK;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACe;AACf;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACyB;;AAEzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,MAAM,EAAE,KAAK,IAAI,cAAc;AAC3D;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4BAA4B,MAAM,EAAE,KAAK,IAAI,cAAc;AAC3D;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,wBAAwB,MAAM,EAAE,KAAK,IAAI,cAAc;AACvD;AACA;AACA;AACA;AACA,wBAAwB,MAAM,EAAE,KAAK,IAAI,cAAc;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,IAAI,IAAI,cAAc;AAChE;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C,iCAAiC,MAAM,GAAG,mBAAmB;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;UC/E7B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACwC;AACM;;AAE9C;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAkB;AAC9C;AACA,qCAAqC,YAAY;AACjD;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,0DAAkB;AAC1C,uBAAuB,0DAAkB;;AAEzC,wCAAwC,QAAQ;AAChD,uCAAuC,OAAO;AAC9C;;AAEA;AACA;AACA;AACA;AACA,4CAA4C,OAAO;AACnD,2CAA2C,MAAM;AACjD;;AAEA;AACA;AACA,8CAA8C,iBAAiB;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wCAAwC,aAAa;AACrD,wCAAwC,mBAAmB;AAC3D;;AAEA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD,0BAA0B,gEAAwB;AAClD;AACA,qCAAqC,YAAY;AACjD,2CAA2C,UAAU;AACrD;;AAEA;AACA;AACA;AACA,4BAA4B,6DAAqB;AACjD,0BAA0B,6DAAqB;AAC/C;AACA,qCAAqC,YAAY;AACjD,2CAA2C,UAAU;AACrD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,oBAAoB,gEAAwB;AAC5C,oBAAoB,gEAAwB;AAC5C,qBAAqB,gEAAwB;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,kDAAc,IAAI,KAAK;AACjD;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,kCAAkC,IAAI,IAAI,cAAc;AACxD;;AAEA;AACA;AACA;AACA,2CAA2C,IAAI,IAAI,cAAc;AACjE,YAAY;AACZ;;AAEA;AACA;AACA;AACA,iDAAiD,IAAI,IAAI,cAAc;AACvE,YAAY;AACZ;AACA;AACA;AACA","sources":["webpack://weather-app/./src/grabData.js","webpack://weather-app/./src/helperFunctions.js","webpack://weather-app/webpack/bootstrap","webpack://weather-app/webpack/runtime/compat get default export","webpack://weather-app/webpack/runtime/define property getters","webpack://weather-app/webpack/runtime/hasOwnProperty shorthand","webpack://weather-app/webpack/runtime/make namespace object","webpack://weather-app/./src/index.js"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-console */\n\n// Module that fetches data from Open Weather API\n\n// function C\n// fetches initial data from 'Open Weather' API\nasync function fetchInitialWeatherDataForMy(city) {\n    try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=f778724f49d8bcbf6a7c1111529b5d72`, { mode: 'cors' });\n        const data = await response.json();\n        return data;\n    } catch (err) {\n        return console.error(err);\n    }\n}\n\n// function B\n// uses the function above to grab the rest of the data required for the 'One Call' API\nasync function fetchTheRestOfMyWeatherData(city) {\n    try {\n        // calls function that fetches weather data and grabs lat / lon / dt from the user's city\n        const initialData = await fetchInitialWeatherDataForMy(city);\n\n        // takes lat / lon / dt from initialData variable above, and processes it for API below\n        const lat = initialData.coord.lat.toFixed(2);\n        const lon = initialData.coord.lon.toFixed(2);\n        // final API call that is then processed and used by the app\n        const response = await fetch(`http://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=f778724f49d8bcbf6a7c1111529b5d72`, { mode: 'cors' });\n        return response;\n    } catch (err) {\n        return console.error(err);\n    }\n}\n\n// function A\n// calls the 'fetchWeatherFor()' function with the city\nexport default async function weatherDataFor(city) {\n    try {\n        const response = await fetchTheRestOfMyWeatherData(city);\n        const data = await response.json();\n        return data;\n    } catch (err) {\n        return console.error(err);\n    }\n}\n","/* eslint-disable default-case */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\nimport './printToScreen';\n\nconst convertUnitTo = (() => {\n    function fahrenheit(data) {\n        const kelvinToFahrenheit = (data - 273.15) * (9 / 5) + 32;\n        return Math.round(kelvinToFahrenheit);\n    }\n\n    function celcius(data) {\n        const kelvinToCelcius = data - 273.15;\n        return Math.round(kelvinToCelcius);\n    }\n    // returns converted weekly temps - fahrenheit\n    // eslint-disable-next-line consistent-return\n    function prepareTemp(keys, values, unit) {\n        let convertedTemp = fahrenheit(values);\n        let result = '';\n        switch (true) {\n        case typeof values === 'object' && keys === 'feels_like':\n            Object.entries(values).forEach(([key, value]) => {\n                convertedTemp = fahrenheit(value);\n                result = `${unit} ${keys}: ${convertedTemp}`;\n                console.log(result);\n                return result;\n            });\n            break;\n        case typeof values === 'object' && keys === 'temp':\n            Object.entries(values).forEach(([key, value]) => {\n                convertedTemp = fahrenheit(value);\n                result = `${unit} ${keys}: ${convertedTemp}`;\n                console.log(result);\n                return result;\n            });\n            break;\n        case typeof values !== 'object' && keys === 'temp':\n            convertedTemp = fahrenheit(values);\n            result = `${unit} ${keys}: ${convertedTemp}`;\n            console.log(convertedTemp);\n            break;\n        case typeof values !== 'object' && keys === 'feels_like':\n            convertedTemp = fahrenheit(values);\n            result = `${unit} ${keys}: ${convertedTemp}`;\n            console.log(result);\n            break;\n        }\n        return result;\n    }\n\n    function parseTempuratures(forecast, unit) {\n        forecast.forEach((x) => {\n            Object.entries(x).forEach(([key, value]) => {\n                // const convertedTemp = convertUnitTo.fahrenheit(value);\n                // console.log(`hourly: ${key}: ${convertedTemp}`);\n                prepareTemp(key, value, unit);\n            });\n        });\n    }\n\n    function unixToDateTime(unix) {\n        const unixStamp = unix;\n        const date = new Date(unixStamp * 1000);\n        const hours = date.getHours();\n        const minutes = `0${date.getMinutes()}`;\n        const formattedTime = `${hours}:${minutes.substr(-2)}`;\n        return formattedTime;\n    }\n\n    return {\n        fahrenheit,\n        celcius,\n        unix: unixToDateTime,\n        parse: parseTempuratures,\n        prepare: prepareTemp,\n    };\n})();\n\nexport default convertUnitTo;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable default-case */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-console */\nimport weatherDataFor from './grabData';\nimport convertUnitTo from './helperFunctions';\n\n// module that grabs, parses and uses weather data for today\nconst currentWeatherModule = (() => {\n    // current time and date\n    function currentDateTime(data) {\n        const currentTime = data.dt;\n        const convertTime = convertUnitTo.unix(currentTime);\n        console.log('-------CURRENT-------');\n        console.log(`current time: ${convertTime}`);\n    }\n\n    // grabs today's sunrise and sunset times\n    function _sunriseSunset(current) {\n        const rise = current.sunrise;\n        const set = current.sunset;\n\n        const sunrise = convertUnitTo.unix(rise);\n        const sunset = convertUnitTo.unix(set);\n\n        console.log(`current sunrise: ${sunrise}`);\n        console.log(`current sunset: ${sunset}`);\n    }\n\n    // data about today's expected wind speed an degree\n    function _winds(current) {\n        const degree = current.wind_deg;\n        const speed = current.wind_speed;\n        console.log(`current wind_degree: ${degree}°`);\n        console.log(`current wind_speed: ${speed}`);\n    }\n\n    // grabs data about today's projected humidity\n    function _fetchHumidity(current) {\n        const humidity = `current humidity: ${current.humidity}%`;\n        console.log(humidity);\n    }\n\n    // grabs today's expected weather patterns\n    function _fetchWeather(current) {\n        const weatherTitle = current.weather[0].main;\n        const weatherDescription = current.weather[0].description;\n\n        console.log(`current weather: ${weatherTitle}`);\n        console.log(`current weather: ${weatherDescription}`);\n    }\n\n    // gather's and converts today's expected temps in fahrenheit\n    function prepareTempFahrenheit(current) {\n        // converts temps\n        const currentTemp = convertUnitTo.fahrenheit(current.temp);\n        const feelsLike = convertUnitTo.fahrenheit(current.feels_like);\n        // uses temps\n        console.log(`current temp: ${currentTemp}°F`);\n        console.log(`current feels like: ${feelsLike}°F`);\n    }\n\n    // gather's and converts today's expected temps in celcius\n    function prepareTempCelcius(current) {\n        // converts temps\n        const currentTemp = convertUnitTo.celcius(current.temp);\n        const feelsLike = convertUnitTo.celcius(current.feels_like);\n        // uses temps\n        console.log(`current temp: ${currentTemp}°C`);\n        console.log(`current feels like: ${feelsLike}°C`);\n    }\n\n    // converts the temp based on users selection of either fahrenheit or celcius\n    function prepareTempController(current) {\n        const unitButton = document.querySelector('.unit');\n\n        switch (true) {\n        case unitButton.textContent === 'C':\n            prepareTempCelcius(current);\n            break;\n        default:\n            prepareTempFahrenheit(current);\n            break;\n        }\n    }\n\n    // sends data off to the different functions inside 'current' weather module\n    function _parseData(current) {\n        currentDateTime(current);\n        _fetchHumidity(current);\n        prepareTempController(current);\n        _fetchWeather(current);\n        _winds(current);\n        _sunriseSunset(current);\n    }\n\n    // grabs and parses data for future us\n    function obtainData(data) {\n        const currentData = data.current;\n        _parseData(currentData);\n    }\n\n    return {\n        data: obtainData,\n    };\n})();\n\n// module that controls the forecasted weather data\nconst dailyWeatherModule = (() => {\n    // eslint-disable-next-line no-unused-vars\n\n    function _weather(data) {\n        console.log(data);\n        const forecastDays = data.hourly.map((day) => day.weather);\n        // eslint-disable-next-line consistent-return\n        forecastDays.forEach((day) => {\n            for (let i = 0; i < day.length; i++) {\n                // stick data from each day onto DOM elements here\n                return day[i];\n            }\n        });\n    }\n\n    function _tempFahrenheit(min, current, max) {\n        const low = convertUnitTo.fahrenheit(min);\n        const now = convertUnitTo.fahrenheit(current);\n        const high = convertUnitTo.fahrenheit(max);\n        console.log(low, now, high);\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    function _tempuratureControl(data, unit) {\n        console.log(data);\n        const tempLow = data.main.temp_min;\n        const tempCurrent = data.main.feels_like;\n        const tempHigh = data.main.temp_max;\n        _tempFahrenheit(tempLow, tempCurrent, tempHigh);\n    }\n\n    function gatherTempurature(forecast) {\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    function _dataParse(data, unit) {\n        // 8 day forecasted data\n        const forecast = data.daily;\n        // hourly data\n        const hourlyForecast = data.hourly;\n        // sends each data set onwards\n        gatherTempurature(forecast);\n    }\n\n    function dataContain(data, unit) {\n        _dataParse(data, unit);\n    }\n\n    return {\n        data: dataContain,\n    };\n})();\n\nconst input = document.querySelector('.city');\nconst button = document.querySelector('.submit');\nconst unitButton = document.querySelector('.unit');\n\nasync function fetchData() {\n    const city = input.value;\n    const results = await weatherDataFor(`${city}`);\n    dailyWeatherModule.data(results);\n    currentWeatherModule.data(results);\n}\n\nbutton.addEventListener('click', async () => {\n    fetchData();\n});\n\nwindow.addEventListener('load', () => {\n    unitButton.textContent = 'F';\n});\n\n// gathers temp unit\nunitButton.addEventListener('click', async (e) => {\n    fetchData();\n\n    switch (true) {\n    case unitButton.textContent === 'C':\n        e.target.textContent = 'F';\n        break;\n    default:\n        e.target.textContent = 'C';\n        break;\n    }\n});\n\n// Object.entries(temps).forEach(([key, value]) => {\n//     let convertedTemp = convertUnitTo.fahrenheit(value);\n//     switch (true) {\n//     case typeof value !== 'object' && key === 'temp':\n//         convertedTemp = convertUnitTo.fahrenheit(value);\n//         console.log(`hourly: ${key}: ${convertedTemp}`);\n//         break;\n\n//     case typeof value === 'object' && key === 'temp':\n//         Object.entries(value).forEach(([key, value]) => {\n//             convertedTemp = convertUnitTo.fahrenheit(value);\n//             console.log(`daily(temp): ${key}: ${convertedTemp}`);\n//         });\n//         break;\n\n//     case typeof value === 'object' && key === 'feels_like':\n//         Object.entries(value).forEach(([key, value]) => {\n//             convertedTemp = convertUnitTo.fahrenheit(value);\n//             console.log(`daily(feels_like): ${key}: ${convertedTemp}`);\n//         });\n//         break;\n//     default:\n//         break;\n//     }\n"],"names":[],"sourceRoot":""}