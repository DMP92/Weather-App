{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;AAAuD;;AAEvD;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,4BAA4B,EAAE,OAAO,EAAE;AACvC;;AAEA;AACe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,iEAAc;;AAE7B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oCAAoC,yBAAyB;AAC7D;AACA,IAAI;AACJ;AACA;AACA;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnF4D;AAC4C;AACnD;;AAErD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,YAAY,EAAE;AACd;AACA,cAAc,EAAE;AAChB,cAAc,EAAE;AAChB,cAAc,EAAE;AAChB;AACA,cAAc,EAAE;AAChB;AACA,cAAc,EAAE;AAChB,cAAc,EAAE;AAChB,cAAc,EAAE;AAChB;;AAEA;AACA,aAAa,EAAE;AACf,eAAe,EAAE;AACjB,gBAAgB,EAAE,OAAO,EAAE;AAC3B,gBAAgB,EAAE;AAClB,iBAAiB,EAAE,OAAO,EAAE;;AAE5B,YAAY,EAAE;AACd,cAAc,EAAE,OAAO,EAAE;AACzB,gBAAgB,EAAE,OAAO,EAAE,OAAO,EAAE;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,WAAW,eAAe,mDAAmD;AAC7E,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ,4EAAS;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,eAAe,6DAAe;AAC9B;AACA;AACA;AACA,MAAM;AACN;AACA,eAAe,kGAA+B;AAC9C,eAAe,kGAA+B;AAC9C;;AAEA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;ACjcqD;AACvB;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,WAAW,QAAQ;AACnB,WAAW,eAAe,mDAAmD;AAC7E,WAAW,OAAO,gEAAgE;AAClF,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACe;AACf,aAAa,gDAAM;;AAEnB,2BAA2B,6DAAe;;AAE1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACfe;AACf;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACJe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,C;;;;;;;;;;;;;;;;;;ACZwC;AACW;AACM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,mEAAY;AACd,iBAAiB,gEAAS;AAC1B,SAAS,yDAAM;AACf,C;;;;;;;;;;;;;;;;AC7ByD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,mEAAY;AACd,yDAAyD;;AAEzD;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA,wKAAwK;;AAExK;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;;AAE8C;AACE;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,0DAAkB;AACnD;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gEAAwB;AACrD,uCAAuC,KAAK;AAC5C;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6DAAqB;AAClD,uCAAuC,KAAK;AAC5C;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,cAAc;AAC/D;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,0BAA0B;AACjE,cAAc;AACd,uCAAuC,0BAA0B;AACjE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAoB;AAC5B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;;ACpIlC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,0FAA0F,KAAK,4CAA4C,cAAc;AACzJ;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2FAA2F,IAAI,OAAO,IAAI,4CAA4C,cAAc;AACpK;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,yHAAyH,KAAK;AAC9H;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAE6C;;;;;;;;;;;;;;;;;;;;ACxD7C;AACA;AACA;AACyB;AACiB;AACsB;AACf;;AAEjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,8DAAY;AACvC,2BAA2B,oDAAc;AACzC;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;;ACpD7B;AACA;AAC6C;AACC;AACA;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,gEAAwB;AACnD;AACA,0BAA0B,WAAW;AACrC;AACA;;AAEA;AACA,qBAAqB,0DAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,WAAW;AACpC;AACA;;AAEA;AACA,iCAAiC,eAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6DAAqB;AAChD;AACA,0BAA0B,WAAW;AACrC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,kBAAkB;AAC5D,mCAAmC,WAAW;AAC9C,iCAAiC,SAAS;AAC1C,mCAAmC,WAAW;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,QAAQ,6DAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;AChItB;AACA;AACA;AAC2E;;AAE3E;AACA;AACA,wBAAwB,IAAI;AAC5B,QAAQ,4DAAiB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvB3B;AACA;AACA;;AAE8C;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD,qDAAqD;AACrD;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,eAAe;AACpD,8CAA8C;AAC9C;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,QAAQ;AAC/C;;AAEA;AACA;AACA;AACA,mDAAmD,eAAe;AAClE,iDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,YAAY;AAC/C;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,kCAAkC,eAAe;AACjD;;AAEA;AACA,kCAAkC,kBAAkB,EAAE,qBAAqB,EAAE,cAAc;AAC3F;;AAEA;AACA,kCAAkC,QAAQ,EAAE,MAAM;AAClD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAIE;;;;;;;UClXF;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AAC+D;AACjB;AACF;AACd;AACyB;AACZ;;AAE3C;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,4DAAiB;AAC7C,0BAA0B,yDAAc;AACxC,IAAI,mDAAuB;AAC3B;AACA;AACA;AACA,IAAI,uDAAiB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,4DAAiB;AAC3C,wBAAwB,yDAAc;AACtC,QAAQ,mDAAuB;AAC/B;AACA;AACA;AACA;AACA,QAAQ,uDAAiB;AACzB;AACA;AACA,0BAA0B,4DAAiB;AAC3C,wBAAwB,yDAAc;AACtC,QAAQ,mDAAuB;AAC/B;AACA;AACA;AACA;AACA,QAAQ,uDAAiB;AACzB;AACA;AACA,0BAA0B,4DAAiB;AAC3C,wBAAwB,yDAAc;AACtC,QAAQ,mDAAuB;AAC/B;AACA;AACA;AACA;AACA,QAAQ,uDAAiB;AACzB;AACA;AACA,0BAA0B,4DAAiB;AAC3C,wBAAwB,yDAAc;AACtC,QAAQ,mDAAuB;AAC/B;AACA;AACA;AACA;AACA,QAAQ,uDAAiB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN,QAAQ,uDAAQ;AAChB;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,YAAY,uDAAQ;AACpB;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,IAAI,uDAAQ;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,gDAAgD,yBAAyB,IAAI,2BAA2B;AACxG;AACA;AACA,gDAAgD,yBAAyB,IAAI,4BAA4B;AACzG;AACA;AACA;;AAEA;AACA;AACA,QAAQ,4DAAiB;AACzB;;AAEA;AACA;AACA,4BAA4B,0DAAkB;AAC9C,yBAAyB,YAAY;AACrC;;AAEA;AACA,2BAA2B,0DAAkB;AAC7C,0BAA0B,0DAAkB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,WAAW;AAC3C,yBAAyB,UAAU;AACnC,QAAQ,gEAAqB;AAC7B;;AAEA;AACA;AACA,sCAAsC,kBAAkB;AACxD;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC,aAAa;AAC9C,iDAAiD,mBAAmB;AACpE;;AAEA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD,0BAA0B,gEAAwB;AAClD;;AAEA,4BAA4B,YAAY;AACxC,yCAAyC,UAAU;AACnD;;AAEA;AACA;AACA;AACA,4BAA4B,6DAAqB;AACjD,0BAA0B,6DAAqB;AAC/C;;AAEA,4BAA4B,YAAY;AACxC,yCAAyC,UAAU;AACnD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://weather-app/./node_modules/date-fns-tz/esm/_lib/tzParseTimezone/index.js","webpack://weather-app/./node_modules/date-fns-tz/esm/_lib/tzTokenizeDate/index.js","webpack://weather-app/./node_modules/date-fns-tz/esm/toDate/index.js","webpack://weather-app/./node_modules/date-fns-tz/esm/utcToZonedTime/index.js","webpack://weather-app/./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack://weather-app/./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack://weather-app/./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack://weather-app/./node_modules/date-fns/esm/fromUnixTime/index.js","webpack://weather-app/./node_modules/date-fns/esm/toDate/index.js","webpack://weather-app/./src/forecast.js","webpack://weather-app/./src/grabData.js","webpack://weather-app/./src/helperFunctions.js","webpack://weather-app/./src/hourly.js","webpack://weather-app/./src/iconController.js","webpack://weather-app/./src/printWeather.js","webpack://weather-app/webpack/bootstrap","webpack://weather-app/webpack/runtime/compat get default export","webpack://weather-app/webpack/runtime/define property getters","webpack://weather-app/webpack/runtime/hasOwnProperty shorthand","webpack://weather-app/webpack/runtime/make namespace object","webpack://weather-app/./src/index.js"],"sourcesContent":["import tzTokenizeDate from '../tzTokenizeDate/index.js'\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\n\nvar patterns = {\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-])(\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/\n}\n\n// Parse various time zone offset formats to an offset in milliseconds\nexport default function tzParseTimezone(timezoneString, date, isUtcDate) {\n  var token\n  var absoluteOffset\n\n  // Z\n  token = patterns.timezoneZ.exec(timezoneString)\n  if (token) {\n    return 0\n  }\n\n  var hours\n\n  // ±hh\n  token = patterns.timezoneHH.exec(timezoneString)\n  if (token) {\n    hours = parseInt(token[2], 10)\n\n    if (!validateTimezone(hours)) {\n      return NaN\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = patterns.timezoneHHMM.exec(timezoneString)\n  if (token) {\n    hours = parseInt(token[2], 10)\n    var minutes = parseInt(token[3], 10)\n\n    if (!validateTimezone(hours, minutes)) {\n      return NaN\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset\n  }\n\n  // IANA time zone\n  if (isValidTimezoneIANAString(timezoneString)) {\n    date = new Date(date || Date.now())\n    var utcDate = isUtcDate ? date : toUtcDate(date)\n\n    var offset = calcOffset(utcDate, timezoneString)\n\n    var fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString)\n\n    return -fixedOffset\n  }\n\n  return 0\n}\n\nfunction toUtcDate(date) {\n  return new Date(\n    Date.UTC(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      date.getHours(),\n      date.getMinutes(),\n      date.getSeconds(),\n      date.getMilliseconds()\n    )\n  )\n}\n\nfunction calcOffset(date, timezoneString) {\n  var tokens = tzTokenizeDate(date, timezoneString)\n\n  var asUTC = Date.UTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5])\n\n  var asTS = date.getTime()\n  var over = asTS % 1000\n  asTS -= over >= 0 ? over : 1000 + over\n  return asUTC - asTS\n}\n\nfunction fixOffset(date, offset, timezoneString) {\n  var localTS = date.getTime()\n\n  // Our UTC time is just a guess because our offset is just a guess\n  var utcGuess = localTS - offset\n\n  // Test whether the zone matches the offset for this ts\n  var o2 = calcOffset(new Date(utcGuess), timezoneString)\n\n  // If so, offset didn't change and we're done\n  if (offset === o2) {\n    return offset\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= o2 - offset\n\n  // If that gives us the local time we want, we're done\n  var o3 = calcOffset(new Date(utcGuess), timezoneString)\n  if (o2 === o3) {\n    return o2\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return Math.max(o2, o3)\n}\n\nfunction validateTimezone(hours, minutes) {\n  if (minutes != null && (minutes < 0 || minutes > 59)) {\n    return false\n  }\n\n  return true\n}\n\nfunction isValidTimezoneIANAString(timeZoneString) {\n  try {\n    Intl.DateTimeFormat(undefined, {timeZone: timeZoneString});\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n","/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\nexport default function tzTokenizeDate(date, timeZone) {\n  var dtf = getDateTimeFormat(timeZone)\n  return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date)\n}\n\nvar typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5,\n}\n\nfunction partsOffset(dtf, date) {\n  var formatted = dtf.formatToParts(date)\n  var filled = []\n  for (var i = 0; i < formatted.length; i++) {\n    var pos = typeToPos[formatted[i].type]\n\n    if (pos >= 0) {\n      filled[pos] = parseInt(formatted[i].value, 10)\n    }\n  }\n  return filled\n}\n\nfunction hackyOffset(dtf, date) {\n  var formatted = dtf.format(date).replace(/\\u200E/g, '')\n  var parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted)\n  // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n  // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n  return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]]\n}\n\n// Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\nvar dtfCache = {}\nfunction getDateTimeFormat(timeZone) {\n  if (!dtfCache[timeZone]) {\n    // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\n    var testDateFormatted = new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: 'America/New_York',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    }).format(new Date('2014-06-25T04:00:00.123Z'))\n    var hourCycleSupported =\n      testDateFormatted === '06/25/2014, 00:00:00' ||\n      testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00'\n\n    dtfCache[timeZone] = hourCycleSupported\n      ? new Intl.DateTimeFormat('en-US', {\n          hour12: false,\n          timeZone: timeZone,\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n        })\n      : new Intl.DateTimeFormat('en-US', {\n          hourCycle: 'h23',\n          timeZone: timeZone,\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n        })\n  }\n  return dtfCache[timeZone]\n}\n","import toInteger from 'date-fns/esm/_lib/toInteger/index.js'\nimport getTimezoneOffsetInMilliseconds from 'date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js'\nimport tzParseTimezone from '../_lib/tzParseTimezone'\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\n\nvar patterns = {\n  dateTimeDelimeter: /[T ]/,\n  plainTime: /:/,\n  timeZoneDelimeter: /[Z ]/i,\n\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [\n    /^([+-]\\d{2})$/, // 0 additional digits\n    /^([+-]\\d{3})$/, // 1 additional digit\n    /^([+-]\\d{4})$/, // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [\n    /^([+-]\\d{4})/, // 0 additional digits\n    /^([+-]\\d{5})/, // 1 additional digit\n    /^([+-]\\d{6})/, // 2 additional digits\n  ],\n\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n\n  // timezone tokens (to identify the presence of a tz)\n  timezone: /([Z+-].*| UTC|(?:[a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?))$/,\n}\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport default function toDate(argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  if (argument === null) {\n    return new Date(NaN)\n  }\n\n  var options = dirtyOptions || {}\n\n  var additionalDigits =\n    options.additionalDigits == null\n      ? DEFAULT_ADDITIONAL_DIGITS\n      : toInteger(options.additionalDigits)\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2')\n  }\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (\n    typeof argument === 'number' ||\n    Object.prototype.toString.call(argument) === '[object Number]'\n  ) {\n    return new Date(argument)\n  } else if (\n    !(\n      typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]'\n    )\n  ) {\n    return new Date(NaN)\n  }\n\n  var dateStrings = splitDateString(argument)\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n\n  var date = parseDate(restDateString, year)\n\n  if (isNaN(date)) {\n    return new Date(NaN)\n  }\n\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time)\n\n      if (isNaN(time)) {\n        return new Date(NaN)\n      }\n    }\n\n    if (dateStrings.timezone || options.timeZone) {\n      offset = tzParseTimezone(dateStrings.timezone || options.timeZone, new Date(timestamp + time))\n      if (isNaN(offset)) {\n        return new Date(NaN)\n      }\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time))\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset))\n    }\n\n    return new Date(timestamp + time + offset)\n  } else {\n    return new Date(NaN)\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {}\n  var array = dateString.split(patterns.dateTimeDelimeter)\n  var timeString\n\n  if (patterns.plainTime.test(array[0])) {\n    dateStrings.date = null\n    timeString = array[0]\n  } else {\n    dateStrings.date = array[0]\n    timeString = array[1]\n    dateStrings.timezone = array[2]\n    if (patterns.timeZoneDelimeter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0]\n      timeString = dateString.substr(dateStrings.date.length, dateString.length)\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString)\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '')\n      dateStrings.timezone = token[1]\n    } else {\n      dateStrings.time = timeString\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits]\n  var patternYYYYY = patterns.YYYYY[additionalDigits]\n\n  var token\n\n  // YYYY or ±YYYYY\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length),\n    }\n  }\n\n  // YY or ±YYY\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length),\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null,\n  }\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token\n  var date\n  var month\n  var week\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n\n  // YYYY-MM\n  token = patterns.MM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n\n    if (!validateDate(year, month)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, month)\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = patterns.DDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n\n    if (!validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n\n  // yyyy-MM-dd or YYYYMMDD\n  token = patterns.MMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n\n    if (!validateDate(year, month, day)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = patterns.Www.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n\n    if (!validateWeekDate(year, week)) {\n      return new Date(NaN)\n    }\n\n    return dayOfISOWeekYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = patterns.WwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN)\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime(timeString) {\n  var token\n  var hours\n  var minutes\n\n  // hh\n  token = patterns.HH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n\n    if (!validateTime(hours)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = patterns.HHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n\n    if (!validateTime(hours, minutes)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE\n  }\n\n  // hh:mm:ss or hhmmss\n  token = patterns.HHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n\n    if (!validateTime(hours, minutes, seconds)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  week = week || 0\n  day = day || 0\n  var date = new Date(0)\n  date.setUTCFullYear(isoWeekYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n\n// Validation functions\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)\n}\n\nfunction validateDate(year, month, date) {\n  if (month < 0 || month > 11) {\n    return false\n  }\n\n  if (date != null) {\n    if (date < 1) {\n      return false\n    }\n\n    var isLeapYear = isLeapYearIndex(year)\n    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n      return false\n    }\n    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  if (dayOfYear < 1) {\n    return false\n  }\n\n  var isLeapYear = isLeapYearIndex(year)\n  if (isLeapYear && dayOfYear > 366) {\n    return false\n  }\n  if (!isLeapYear && dayOfYear > 365) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateWeekDate(year, week, day) {\n  if (week < 0 || week > 52) {\n    return false\n  }\n\n  if (day != null && (day < 0 || day > 6)) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours != null && (hours < 0 || hours >= 25)) {\n    return false\n  }\n\n  if (minutes != null && (minutes < 0 || minutes >= 60)) {\n    return false\n  }\n\n  if (seconds != null && (seconds < 0 || seconds >= 60)) {\n    return false\n  }\n\n  return true\n}\n","import tzParseTimezone from '../_lib/tzParseTimezone'\nimport toDate from '../toDate'\n\n/**\n * @name utcToZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with the relevant UTC time\n * @param {String} timeZone - the time zone to get local time for, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = utcToZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\nexport default function utcToZonedTime(dirtyDate, timeZone, options) {\n  var date = toDate(dirtyDate, options)\n\n  var offsetMilliseconds = tzParseTimezone(timeZone, date, true) || 0\n\n  var d = new Date(date.getTime() - offsetMilliseconds)\n\n  var zonedTime = new Date(\n    d.getUTCFullYear(),\n    d.getUTCMonth(),\n    d.getUTCDate(),\n    d.getUTCHours(),\n    d.getUTCMinutes(),\n    d.getUTCSeconds(),\n    d.getUTCMilliseconds()\n  )\n\n  return zonedTime\n}\n","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Number} unixTime - the given Unix timestamp\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * var result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\n\nexport default function fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-underscore-dangle */\n\nimport convertUnitTo from './helperFunctions';\nimport { forecastModule } from './printWeather';\n\nconst dailyWeatherModule = (() => {\n    const forecastCollection = {};\n    const forecastedTemp = [];\n    const forecastedHumidity = [];\n    const forecastedRain = [];\n    const forecastedWeather = [];\n    const forecastedDay = [];\n    // eslint-disable-next-line no-unused-vars\n    function _weather(day, i) {\n        let j = 0;\n        Object.entries(day).forEach(([key, value]) => {\n            // id main description icon\n            const weatherObject = [];\n            weatherObject[j] = value;\n            forecastedWeather[i] = weatherObject[j];\n            forecastCollection.weather = forecastedWeather;\n        });\n        j += 1;\n    }\n\n    function displayDate(date) {\n        let i = 0;\n        date.forEach((day) => {\n            const forecastDate = convertUnitTo.unix(day.dt);\n            const recordedDate = forecastDate.slice(0, 10);\n            forecastedDay[i] = recordedDate;\n            forecastCollection.date = forecastedDay;\n            i += 1;\n        });\n    }\n\n    // accesses the conversion interface in 'helperFunctions.js'\n    function fetchTempFahrenheit(forecast) {\n        let i = 0;\n        forecast.forEach((day) => {\n            Object.entries(day.temp).forEach(([key, value]) => {\n                const temp = convertUnitTo.fahrenheit(value);\n                forecastedTemp[i] = `${temp}° F`;\n                forecastCollection.temp = forecastedTemp;\n            });\n            i++;\n        });\n    }\n\n    // accesses the conversion interface in 'helperFunctions.js'\n    function fetchTempCelcius(forecast) {\n        let i = 0;\n        forecast.forEach((day) => {\n            Object.entries(day.temp).forEach(([key, value]) => {\n                const temp = convertUnitTo.celcius(value);\n                forecastedTemp[i] = `${temp}° C`;\n                forecastCollection.temp = forecastedTemp;\n            });\n            i++;\n        });\n    }\n\n    // fetches textContent of the fahrenheit/celcius button. Depending on the user's setting\n    // it converts the temp to that unit of measure\n    function tempController(data) {\n        const unit = document.querySelector('.unit');\n        switch (true) {\n        case unit.textContent === 'C':\n            fetchTempCelcius(data);\n            break;\n        default:\n            fetchTempFahrenheit(data);\n        }\n    }\n\n    // humidity control\n    function displayHumidity(forecast) {\n        let i = 0;\n        forecast.forEach((day) => {\n            const humidityLevel = day.humidity;\n            forecastedHumidity[i] = `humidity: ${humidityLevel}%`;\n            forecastCollection.humidity = forecastedHumidity;\n            i += 1;\n        });\n    }\n\n    // gives the chance and amount of rain\n    function _chanceOfRain(forecast) {\n        let i = 0;\n        forecast.forEach((day) => {\n            if (day.rain !== undefined) {\n                forecastedRain[i] = `${Math.round(day.pop * 100)}%`;\n            } else {\n                forecastedRain[i] = `${Math.round(day.pop * 100)}%`;\n            }\n            forecastCollection.rain = forecastedRain;\n            i += 1;\n        });\n    }\n    // breaks down forecasted weather and sends data off to their respective functions\n    function _forecastParse(forecast) {\n        let i = 0;\n        forecast.forEach((day) => {\n            _weather(day.weather, i);\n            i += 1;\n        });\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    function _dataParse(data) {\n        // 8 day forecasted data\n        const forecast = data.daily;\n        displayDate(forecast);\n        tempController(forecast);\n        displayHumidity(forecast);\n        _forecastParse(forecast);\n        _chanceOfRain(forecast);\n        forecastModule.print(forecastCollection);\n    }\n\n    function dataContain(data) {\n        _dataParse(data);\n    }\n\n    return {\n        data: dataContain,\n    };\n})();\n\nexport default dailyWeatherModule;\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-console */\n\n// Module that fetches data from Open Weather API\n\n// function C\n// fetches initial data from 'Open Weather' API\nasync function fetchInitialWeatherDataForMy(city) {\n    try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=f778724f49d8bcbf6a7c1111529b5d72`, { mode: 'cors' });\n        const data = await response.json();\n        return data;\n    } catch (err) {\n        return console.error(err);\n    }\n}\n\n// function B\n// uses the function above to grab the rest of the data required for the 'One Call' API\nasync function fetchTheRestOfMyWeatherData(city) {\n    try {\n        // calls function that fetches weather data and grabs lat / lon / dt from the user's city\n        const initialData = await fetchInitialWeatherDataForMy(city);\n\n        // takes lat / lon / dt from initialData variable above, and processes it for API below\n        const lat = initialData.coord.lat.toFixed(2);\n        const lon = initialData.coord.lon.toFixed(2);\n        // final API call that is then processed and used by the app\n        const response = await fetch(`http://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=f778724f49d8bcbf6a7c1111529b5d72`, { mode: 'cors' });\n        return response;\n    } catch (err) {\n        return console.error(err);\n    }\n}\n\nasync function cityOrCountryName(city) {\n    try {\n        const response = await fetch(`http://api.weatherapi.com/v1/forecast.json?key=8b74a6e5cbf14690bc2100254210608&q=${city}`);\n        const data = await response.json();\n        return data;\n    } catch (err) {\n        return console.error(err);\n    }\n}\n// function A\n// calls the 'fetchWeatherFor()' function with the city\nasync function weatherDataFor(city) {\n    try {\n        const response = await fetchTheRestOfMyWeatherData(city);\n        const data = await response.json();\n        return data;\n    } catch (err) {\n        return console.error(err);\n    }\n}\n\nexport { cityOrCountryName, weatherDataFor };\n","/* eslint-disable default-case */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\nimport './printToScreen';\nimport { toDate, format } from 'date-fns';\nimport { utcToZonedTime, getTimezoneOffset } from 'date-fns-tz';\nimport fromUnixTime from 'date-fns/fromUnixTime';\n\nconst convertUnitTo = (() => {\n    function addStr(str, index, stringToAdd) {\n        return str.substring(0, index) + stringToAdd + str.substring(index, str.length);\n    }\n\n    function fahrenheit(data) {\n        const kelvinToFahrenheit = (data - 273.15) * (9 / 5) + 32;\n        return Math.round(kelvinToFahrenheit);\n    }\n\n    function celcius(data) {\n        const kelvinToCelcius = data - 273.15;\n        return Math.round(kelvinToCelcius);\n    }\n    // returns converted weekly temps - fahrenheit\n    // eslint-disable-next-line consistent-return\n\n    function formatTime(string) {\n        const time = string.toString();\n        const newTime = time.substr(0, 25);\n        const comma = ', ';\n        const news = addStr(newTime, 10, comma);\n        return news;\n    }\n\n    // converts target city's .dt and timezone into current time\n    function unixToDateTime(unix, tz) {\n        const targetTime = fromUnixTime(unix);\n        const properTime = utcToZonedTime(targetTime, tz);\n        const time = formatTime(properTime);\n        return time;\n    }\n\n    function timeZoneOffset(date) {\n\n    }\n\n    return {\n        fahrenheit,\n        celcius,\n        unix: unixToDateTime,\n    };\n})();\n\nexport default convertUnitTo;\n","/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\nimport { utcToZonedTime } from 'date-fns-tz';\nimport convertUnitTo from './helperFunctions';\nimport { hourlyModule } from './printWeather';\n\nconst hourly = (() => {\n    // object that will be used to print data to the screen\n    const hour = {};\n    const hourTempF = [];\n    const hourTempC = [];\n    const hourRain = [];\n    const hourDay = [];\n    const hourTime = [];\n    const hourWeather = [];\n    const hourHumidity = [];\n\n    // gather's and converts today's expected temps in fahrenheit\n    function prepareTempFahrenheit(hours, i) {\n        // converts temps\n        const hourlyTemp = convertUnitTo.fahrenheit(hours.temp);\n        // uses temps\n        hourTempF[i] = `${hourlyTemp}° F`;\n        hour.temp = hourTempF;\n    }\n\n    function timeOfHour(hours, i) {\n        const time = convertUnitTo.unix(hours.dt);\n        // splits the unix string up into usable chunks for this application\n        const day = time.slice(0, 11);\n        // eslint-disable-next-line no-shadow\n        const timeOfHour = time.slice(18, 23);\n        // uses the manipulated strings\n        hourDay[i] = day;\n        hourTime[i] = timeOfHour;\n        // gives the array to the object to be printed\n        hour.day = hourDay;\n        hour.time = hourTime;\n    }\n\n    // gives the hourly chance of rain\n    function hoursRainChance(hours, i) {\n        const rainChance = Math.round(hours.pop * 100);\n        hourRain[i] = `${rainChance}%`;\n        hour.rain = hourRain;\n    }\n\n    function hourlyHumidity(hours, i) {\n        const humidityLevel = `${hours.humidity}% Humidity`;\n        hourHumidity[i] = humidityLevel;\n        hour.humidity = hourHumidity;\n    }\n    // gather's and converts today's expected temps in celcius\n    function prepareTempCelcius(hours, i) {\n        // converts temps\n        const hourlyTemp = convertUnitTo.celcius(hours.temp);\n        // uses temps\n        hourTempC[i] = `${hourlyTemp}° C`;\n        hour.temp = hourTempC;\n    }\n\n    // converts the temp based on users selection of either fahrenheit or celcius\n    function prepareTempController(hours, i) {\n        // eslint-disable-next-line no-shadow\n        const unitButton = document.querySelector('.unit');\n\n        switch (true) {\n        case unitButton.textContent === 'C':\n            prepareTempCelcius(hours, i);\n            break;\n        default:\n            prepareTempFahrenheit(hours, i);\n            break;\n        }\n    }\n\n    // prints hourly weather descriptions\n    function hourlyWeather(hours, i) {\n        const hoursWeatherInfo = {};\n        hoursWeatherInfo.description = `${hours.description}`;\n        hoursWeatherInfo.main = `${hours.main}`;\n        hoursWeatherInfo.id = `${hours.id}`;\n        hoursWeatherInfo.icon = `${hours.icon}`;\n\n        hourWeather[i] = hoursWeatherInfo;\n        hour.weather = hourWeather;\n    }\n    // function that gets each hour's weather\n    function parseHourlyWeather(hours) {\n        let i = 0;\n        hours.forEach((hr) => {\n            Object.entries(hr.weather).forEach(([key, value]) => {\n                hourlyWeather(value, i);\n            });\n            i += 1;\n        });\n    }\n\n    // ships data to different functions\n    function parseData(hours) {\n        parseHourlyWeather(hours);\n\n        // these had to be handled separately\n        let i = 0;\n\n        // for each hour, a different function is called that prints each item to screen\n        hours.forEach((hr) => {\n            prepareTempController(hr, i);\n            hoursRainChance(hr, i);\n            timeOfHour(hr, i);\n            hourlyHumidity(hr, i);\n            i += 1;\n        });\n\n        // prints each hour's container to screen\n        hourlyModule.print(hour);\n    }\n    // obtains and parses out weather data\n    function dataObtain(data) {\n        const hours = data.hourly;\n        parseData(hours);\n    }\n\n    return {\n        dataObtain,\n    };\n})();\n\nexport default hourly;\n","/* eslint-disable default-case */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\nimport { hourlyModule, forecastModule, printModule } from './printWeather';\n\nconst iconHandler = (() => {\n    function printToday(type, img, obj) {\n        const icon = `${img}@2x.png`;\n        printModule.check(img);\n    }\n\n    function operator(type, img) {\n        switch (true) {\n        case type === 'current':\n            printToday(type, img);\n            break;\n        }\n    }\n    return {\n        operator,\n    };\n})();\n\nexport default iconHandler;\n","/* eslint-disable no-use-before-define */\n/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\n\nimport convertUnitTo from './helperFunctions';\n\n/* eslint-disable default-case */\nconst hourlyModule = (() => {\n    const hourlyDiv = document.querySelector('.hourly');\n\n    function printPic(object) {\n        const picture = object;\n        const image = document.querySelectorAll('.hourPic');\n        const imageData = Array.from(image);\n        let i = 0;\n        picture.forEach((pic) => {\n            const weatherPic = document.createElement('img');\n            weatherPic.src = `/src/Images/${pic.icon}@2x.png`;\n            weatherPic.style.cssText = 'width: 50px; height: 50px';\n            imageData[i].appendChild(weatherPic);\n            i += 1;\n        });\n    }\n\n    function printTemps(object) {\n        const temps = object;\n        const tempContainer = document.querySelectorAll('.hourTemp');\n        const tempData = Array.from(tempContainer);\n        let i = 0;\n        temps.forEach((temp) => {\n            tempData[i].textContent = temp;\n            i += 1;\n        });\n    }\n\n    function printRain(object) {\n        const rainContainers = document.querySelectorAll('.hourRain');\n        const rainPic = document.querySelectorAll('.rainPic');\n\n        const rainPics = Array.from(rainPic);\n        const rain = Array.from(rainContainers);\n        let i = 0;\n        rain.forEach((hour) => {\n            if (object[i] !== '0%') {\n                const rainImg = document.createElement('img');\n                rainImg.src = '/src/Images/09d@2x.png';\n                rainImg.style.cssText = 'width: 50px; height: 50px';\n                rainPics[i].appendChild(rainImg);\n                rain[i].textContent = object[i];\n            }\n            i += 1;\n        });\n    }\n\n    function printDay(object) {\n        const days = document.querySelectorAll('.hourDay');\n        const dayArray = Array.from(days);\n\n        let i = 0;\n\n        dayArray.forEach((day) => {\n            dayArray[i].textContent = object[i];\n            i += 1;\n        });\n    }\n    function printTime(object) {\n        const hourContainer = document.querySelectorAll('.hourTime');\n        const hourArray = Array.from(hourContainer);\n        let i = 0;\n        hourArray.forEach((leHour) => {\n            // eslint-disable-next-line no-param-reassign\n            leHour.textContent = object[i];\n            i += 1;\n        });\n    }\n\n    function hourCreate(object) {\n        object.forEach(() => {\n            // creates each hour container\n            const hourDiv = document.createElement('div');\n            hourDiv.classList.add('hour');\n            hourlyDiv.appendChild(hourDiv);\n\n            const hourTemp = document.createElement('div');\n            hourTemp.classList.add('hourTemp');\n\n            const hourPic = document.createElement('div');\n            hourPic.classList.add('hourPic');\n\n            const rainPic = document.createElement('div');\n            rainPic.classList.add('rainPic');\n\n            const hoursRain = document.createElement('div');\n            hoursRain.classList.add('hourRain');\n\n            const hourDay = document.createElement('div');\n            hourDay.classList.add('hourDay');\n\n            const hourTime = document.createElement('div');\n            hourTime.classList.add('hourTime');\n\n            hourDiv.appendChild(hourPic);\n            hourDiv.appendChild(hourTemp);\n            hourDiv.appendChild(rainPic);\n            hourDiv.appendChild(hoursRain);\n            hourDiv.appendChild(hourDay);\n            hourDiv.appendChild(hourTime);\n            const divArray = [hourTemp, hourPic, hoursRain];\n            return divArray;\n        });\n    }\n\n    // receives the hourly object from hourly.js\n    function printHours(object) {\n        hourCreate(object.temp);\n        printPic(object.weather);\n        printTemps(object.temp);\n        printRain(object.rain);\n        printTime(object.time);\n        printDay(object.day);\n    }\n\n    function deleteHours() {\n        const hourDiv = document.querySelector('.hourly');\n\n        while (hourDiv.firstChild) {\n            hourDiv.removeChild(hourDiv.firstChild);\n        }\n    }\n    return {\n        print: printHours,\n        delete: deleteHours,\n    };\n})();\n\nconst forecastModule = (() => {\n    function dayDates(object) {\n        const dateContainer = document.querySelectorAll('.dayDate');\n        const days = Array.from(dateContainer);\n        let i = 0;\n        days.forEach(() => {\n            days[i].textContent = object.date[i];\n            i += 1;\n        });\n    }\n\n    function dayTemps(object) {\n        const tempContainers = document.querySelectorAll('.dayTemp');\n        const temps = Array.from(tempContainers);\n        let i = 0;\n\n        temps.forEach(() => {\n            temps[i].textContent = object[i];\n            i += 1;\n        });\n    }\n\n    function dayWeathers(object) {\n        const weatherContainer = document.querySelectorAll('.dayWeather');\n        const daysWeather = Array.from(weatherContainer);\n        let i = 0;\n\n        daysWeather.forEach(() => {\n            const img = document.createElement('img');\n            img.src = `/src/Images/${object[i].icon}@2x.png`;\n            img.style.cssText = 'width: 50px; height: 50px';\n            daysWeather[i].appendChild(img);\n            i += 1;\n        });\n    }\n\n    function dayRainIcons(object) {\n        const rainContainer = document.querySelectorAll('.dayRain');\n        const dayRainImgContainers = document.querySelectorAll('.dayRainIcon');\n        const rainData = Array.from(rainContainer);\n        const dayRainImgs = Array.from(dayRainImgContainers);\n        let i = 0;\n        rainData.forEach(() => {\n            const img = document.createElement('img');\n            img.src = '/src/Images/09d@2x.png';\n            img.style.cssText = 'width: 50px; height: 50px;';\n            dayRainImgs[i].appendChild(img);\n            rainData[i].textContent = object[i];\n            i += 1;\n        });\n    }\n\n    function dayGridCreate() {\n        const dayContainers = document.querySelectorAll('.day');\n        const days = Array.from(dayContainers);\n        let i = 0;\n\n        days.forEach((day) => {\n            const dayDate = document.createElement('div');\n            dayDate.classList.add('dayDate');\n\n            const dayTemp = document.createElement('div');\n            dayTemp.classList.add('dayTemp');\n\n            const dayWeather = document.createElement('div');\n            dayWeather.classList.add('dayWeather');\n\n            const dayRainIcon = document.createElement('div');\n            dayRainIcon.classList.add('dayRainIcon');\n\n            const dayRain = document.createElement('div');\n            dayRain.classList.add('dayRain');\n\n            days[i].appendChild(dayDate);\n            days[i].appendChild(dayWeather);\n            days[i].appendChild(dayTemp);\n            days[i].appendChild(dayRainIcon);\n            days[i].appendChild(dayRain);\n\n            i += 1;\n        });\n    }\n\n    function dayCreate(object) {\n        object.forEach(() => {\n            const dayContainer = document.querySelector('.forecast');\n            const day = document.createElement('div');\n            day.classList.add('day');\n            dayContainer.appendChild(day);\n        });\n    }\n\n    function printForecast(object) {\n        dayCreate(object.humidity);\n        dayGridCreate();\n        dayDates(object);\n        dayWeathers(object.weather);\n        dayRainIcons(object.rain);\n        printModule.rain(object.rain[0]);\n        let i = 0;\n\n        object.temp.forEach((obj) => {\n            dayTemps(object.temp);\n            i += 1;\n        });\n    }\n\n    function deleteForecast() {\n        const forecastDiv = document.querySelector('.forecast');\n\n        while (forecastDiv.firstChild) {\n            forecastDiv.removeChild(forecastDiv.firstChild);\n        }\n    }\n\n    return {\n        print: printForecast,\n        delete: deleteForecast,\n    };\n})();\n\n// Module that gathers all data for the day's weather and prints it to the DOM\nconst printModule = (() => {\n    const weatherPic = document.querySelector('.weatherPic');\n    const today = document.querySelector('.today').children;\n\n    function printDate(object) {\n        today[0].textContent = object.time;\n    }\n\n    function printRainChance(object) {\n        const rainContainer = document.querySelector('.rainChance');\n        rainContainer.textContent = `${object} Chance of rain`;\n    }\n\n    function printSunTimes(object) {\n        const sunriseContainer = document.querySelector('.sunrise');\n        const sunsetContainer = document.querySelector('.sunset');\n        sunriseContainer.textContent = `Sunrise: ${object.sunrise}`;\n        sunsetContainer.textContent = `Sunset: ${object.sunset}`;\n    }\n\n    function printWeatherPic(images, status) {\n        if (status === 'present') {\n            weatherPic.removeChild(weatherPic.firstChild);\n        }\n        const image = document.createElement('img');\n        image.classList.add('image');\n        image.src = `/src/Images/${images.icon}@2x.png`;\n        weatherPic.appendChild(image);\n        // image.src = ;\n        // image.style.cssText = 'width: 80px; height: 80px';\n        // console.log(picture);\n        // console.log(today[2].children);\n        // today[2].appendChild(image);\n        // console.log(today[2].children);\n        // console.log(picture);\n    }\n\n    function checkForImage(obj) {\n        if (weatherPic.children[0] === undefined) {\n            printWeatherPic(obj, 'absent');\n        } else {\n            printWeatherPic(obj, 'present');\n        }\n    }\n\n    function printTemp(object) {\n        today[3].textContent = `${object.current}`;\n    }\n\n    function printSummary(object) {\n        today[4].textContent = `${object.feelsLike} ${object.weatherTitle} ${object.breeze}`;\n    }\n\n    function printWind(degree, speed) {\n        today[6].textContent = `${degree} ${speed}`;\n    }\n\n    function printHumidity(object) {\n        today[7].textContent = object.humidity;\n    }\n\n    function printToday(object, img) {\n        printDate(object);\n        printTemp(object);\n        checkForImage(object);\n        printSummary(object);\n        printWind(object);\n        printHumidity(object);\n        printSunTimes(object);\n    }\n\n    function printObjects(object, page, img) {\n        switch (true) {\n        case page === 'current':\n            printToday(object, img);\n            break;\n        case page === 'hourly':\n            hourlyModule.print(object);\n            break;\n        case page === 'forecast':\n            forecastModule.print(object);\n            break;\n        }\n    }\n\n    function deleteData() {\n        const todayDiv = document.querySelector('.today');\n        switch (true) {\n        case todayDiv.firstChild:\n            while (todayDiv.firstChild) {\n                todayDiv.removeChild(todayDiv.firstChild);\n            }\n            break;\n        }\n    }\n\n    return {\n        print: printObjects,\n        check: checkForImage,\n        printWind,\n        delete: deleteData,\n        rain: printRainChance,\n    };\n})();\n\nfunction clearDOM() {\n    printModule.delete();\n    hourlyModule.delete();\n    forecastModule.delete();\n}\n\nexport {\n    printModule, forecastModule, hourlyModule, clearDOM,\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable no-use-before-define */\n/* eslint-disable no-alert */\n/* eslint-disable default-case */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-console */\nimport { weatherDataFor, cityOrCountryName } from './grabData';\nimport convertUnitTo from './helperFunctions';\nimport dailyWeatherModule from './forecast';\nimport hourly from './hourly';\nimport { printModule, clearDOM } from './printWeather';\nimport iconHandler from './iconController';\n\nconst higherInput = document.querySelector('.city');\nconst lowerInput = document.querySelector('.lowerCity');\nconst button = document.querySelector('.submit');\nconst unitButton = document.querySelector('.unit');\nconst inputArray = [];\n\nasync function autoCity() {\n    const stateName = await cityOrCountryName('Honolulu');\n    const results = await weatherDataFor(stateName.location.name);\n    dailyWeatherModule.data(results);\n    currentWeatherModule.data(results);\n    currentWeatherModule.name(stateName);\n    currentWeatherModule.winds(stateName);\n    hourly.dataObtain(results);\n}\n\nfunction inputLimiter(state) {\n    inputArray.pop();\n    inputArray.push(state);\n}\n// fetches data that is then passed into the 'currentWeatherModule' and all\n// other modules\nasync function fetchData() {\n    const city = inputArray[0];\n    let results = '';\n    let stateName = '';\n\n    switch (true) {\n    case city === true && higherInput.value !== '':\n        stateName = await cityOrCountryName(higherInput.value);\n        results = await weatherDataFor(stateName.location.name);\n        dailyWeatherModule.data(results);\n        // eslint-disable-next-line no-use-before-define\n        currentWeatherModule.data(results);\n        currentWeatherModule.name(stateName);\n        currentWeatherModule.winds(stateName);\n        hourly.dataObtain(results);\n        break;\n    case city === false && lowerInput.value !== '':\n        stateName = await cityOrCountryName(lowerInput.value);\n        results = await weatherDataFor(stateName.location.name);\n        dailyWeatherModule.data(results);\n        // eslint-disable-next-line no-use-before-define\n        currentWeatherModule.data(results);\n        currentWeatherModule.name(stateName);\n        currentWeatherModule.winds(stateName);\n        hourly.dataObtain(results);\n        break;\n    case city === false && lowerInput.value === '':\n        stateName = await cityOrCountryName(higherInput.value);\n        results = await weatherDataFor(stateName.location.name);\n        dailyWeatherModule.data(results);\n        // eslint-disable-next-line no-use-before-define\n        currentWeatherModule.data(results);\n        currentWeatherModule.name(stateName);\n        currentWeatherModule.winds(stateName);\n        hourly.dataObtain(results);\n        break;\n    case city === true && higherInput.value === '':\n        stateName = await cityOrCountryName(lowerInput.value);\n        results = await weatherDataFor(stateName.location.name);\n        dailyWeatherModule.data(results);\n        // eslint-disable-next-line no-use-before-define\n        currentWeatherModule.data(results);\n        currentWeatherModule.name(stateName);\n        currentWeatherModule.winds(stateName);\n        hourly.dataObtain(results);\n        break;\n    }\n}\n\n// upon pressing the submit button, or pressing enter the function grabs required data\nbutton.addEventListener('click', async () => {\n    if (higherInput.value === '' && lowerInput.value === '') {\n        alert('Enter the name of a city');\n    } else {\n        clearDOM();\n        fetchData();\n    }\n});\n\nhigherInput.addEventListener('input', () => {\n    inputLimiter(true);\n});\n\nlowerInput.addEventListener('input', () => {\n    inputLimiter(false);\n});\n\n// acts as another search button to refresh contents of DOM according to unit selected\nwindow.addEventListener('load', async () => {\n    unitButton.textContent = 'F';\n    lowerInput.value = '';\n    higherInput.value = '';\n    autoCity();\n});\n\nwindow.addEventListener('keydown', (e) => {\n    switch (true) {\n    case e.keyCode === 13:\n        if (higherInput.value === '' && lowerInput.value === '') {\n            alert('Enter the name of a city');\n        } else {\n            clearDOM();\n            fetchData();\n        }\n    }\n});\n// gathers temp unit\nunitButton.addEventListener('click', async (e) => {\n    clearDOM();\n    fetchData();\n\n    switch (true) {\n    case unitButton.textContent === 'C':\n        e.target.textContent = 'F';\n        break;\n    default:\n        e.target.textContent = 'C';\n        break;\n    }\n});\n\n// module that grabs, parses and uses weather data for today\n// ********** Current Weather *********\nconst currentWeatherModule = (() => {\n    // current time and date\n    const today = document.querySelector('.today');\n\n    const wToday = {};\n\n    function printStateOrCountry(regionData) {\n        const cityStateContainer = document.querySelector('.cityState');\n\n        switch (true) {\n        case regionData.location.country === 'United States of America':\n            cityStateContainer.textContent = `${regionData.location.name}, ${regionData.location.region}`;\n            break;\n        case regionData.location.country !== 'United States of America':\n            cityStateContainer.textContent = `${regionData.location.name}, ${regionData.location.country}`;\n            break;\n        }\n    }\n\n    function shareToday() {\n        const page = 'current';\n        printModule.print(wToday, page);\n    }\n\n    function currentDateTime(data, tz) {\n        const currentTime = data.dt;\n        const convertTime = convertUnitTo.unix(currentTime, tz);\n        wToday.time = `${convertTime}`;\n    }\n\n    function sunriseSunset(object) {\n        const rawSunrise = convertUnitTo.unix(object.sunrise);\n        const rawSunset = convertUnitTo.unix(object.sunset);\n        const sunrise = rawSunrise.slice(17, 26);\n        const sunset = rawSunset.slice(17, 26);\n        wToday.sunrise = sunrise;\n        wToday.sunset = sunset;\n    }\n\n    function _breezeType(windSpeed) {\n        let breezeMessage = '';\n        switch (true) {\n        case windSpeed <= 2.5:\n            breezeMessage = 'Light breeze.';\n            break;\n        case windSpeed > 2.5 && windSpeed <= 3.5:\n            breezeMessage = 'Gentle breeze.';\n            break;\n        case windSpeed > 3.5 && windSpeed <= 5:\n            breezeMessage = 'Moderate breeze.';\n            break;\n        case windSpeed > 5 && windSpeed <= 6:\n            breezeMessage = 'Strong breeze.';\n            break;\n        case windSpeed > 6 && windSpeed <= 7:\n            breezeMessage = 'Near gale.';\n            break;\n        case windSpeed > 7 && windSpeed <= 8:\n            breezeMessage = 'Gale force winds.';\n            break;\n        case windSpeed > 8:\n            breezeMessage = 'Storm/hurricane force winds.';\n        }\n        wToday.breeze = breezeMessage;\n    }\n\n    // data about today's expected wind speed an degree\n    function winds(weather) {\n        const windDegree = weather.current.wind_dir;\n        const windSpeed = weather.current.wind_mph;\n        const degree = `Wind: ${windDegree}`;\n        const speed = `${windSpeed}mph`;\n        printModule.printWind(degree, speed);\n    }\n\n    // grabs data about today's projected humidity\n    function _fetchHumidity(current) {\n        const humidity = `Humidity: ${current.humidity} %`;\n        wToday.humidity = humidity;\n    }\n\n    // grabs today's expected weather patterns\n    function _fetchWeather(current) {\n        const weatherTitle = current.weather[0].main;\n        const weatherDescription = current.weather[0].description;\n\n        wToday.weatherTitle = `${weatherTitle}. `;\n        wToday.weatherDesc = `current weather: ${weatherDescription}`;\n    }\n\n    // gather's and converts today's expected temps in fahrenheit\n    function prepareTempFahrenheit(current) {\n        // converts temps\n        const currentTemp = convertUnitTo.fahrenheit(current.temp);\n        const feelsLike = convertUnitTo.fahrenheit(current.feels_like);\n        // uses temps\n\n        wToday.current = `${currentTemp}° F`;\n        wToday.feelsLike = `Feels like ${feelsLike}° F. `;\n    }\n\n    // gather's and converts today's expected temps in celcius\n    function prepareTempCelcius(current) {\n        // converts temps\n        const currentTemp = convertUnitTo.celcius(current.temp);\n        const feelsLike = convertUnitTo.celcius(current.feels_like);\n        // uses temps\n\n        wToday.current = `${currentTemp}° C`;\n        wToday.feelsLike = `Feels like ${feelsLike}° C. `;\n    }\n\n    // converts the temp based on users selection of either fahrenheit or celcius\n    function prepareTempController(current) {\n        // eslint-disable-next-line no-shadow\n        const unitButton = document.querySelector('.unit');\n\n        switch (true) {\n        case unitButton.textContent === 'C':\n            prepareTempCelcius(current);\n            break;\n        default:\n            prepareTempFahrenheit(current);\n            break;\n        }\n    }\n\n    function weatherIcon(data) {\n        const icons = data.weather[0].icon;\n        const type = 'current';\n        wToday.icon = icons;\n    }\n    // sends data off to the different functions inside 'current' weather module\n    async function _parseData(current, tz) {\n        currentDateTime(current, tz);\n        weatherIcon(current);\n        _fetchHumidity(current);\n        prepareTempController(current);\n        _fetchWeather(current);\n        sunriseSunset(current);\n        _breezeType(current.windSpeed);\n        shareToday(wToday);\n    }\n\n    // grabs and parses data for future use\n    function obtainData(data, timezone) {\n        const currentData = data.current;\n        const tz = data.timezone;\n        _parseData(currentData, tz);\n    }\n\n    return {\n        data: obtainData,\n        current: shareToday,\n        winds,\n        name: printStateOrCountry,\n    };\n})();\n"],"names":[],"sourceRoot":""}